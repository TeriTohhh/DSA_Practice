âœ… EASY LEVEL
Reverse a string
ğŸ”¹ Input: "hello" â†’ Output: "olleh"

Check for palindrome
ğŸ”¹ Input: "madam" â†’ Output: true

Count vowels and consonants
ğŸ”¹ Input: "abcde" â†’ Output: Vowels: 2, Consonants: 3

Remove duplicate characters
ğŸ”¹ Input: "banana" â†’ Output: "ban"

Find first non-repeating character
ğŸ”¹ Input: "aabbcdd" â†’ Output: "c"

Convert string to title case
ğŸ”¹ Input: "hello world" â†’ Output: "Hello World"

Check if two strings are anagrams
ğŸ”¹ Input: "listen", "silent" â†’ Output: true

Toggle case of each character
ğŸ”¹ Input: "AbC" â†’ Output: "aBc"

Check if a string is a pangram
ğŸ”¹ Input: "The quick brown fox jumps over the lazy dog" â†’ Output: true

Find character with maximum frequency
ğŸ”¹ Input: "apple" â†’ Output: "p"

ğŸ”· MEDIUM LEVEL
Longest common prefix
ğŸ”¹ Input: ["flower","flow","flight"] â†’ Output: "fl"

Count all substrings
ğŸ”¹ Input: "abc" â†’ Output: 6 substrings

Group anagrams
ğŸ”¹ Input: ["eat","tea","tan","ate","nat","bat"]
ğŸ”¹ Output: [["eat","tea","ate"],["tan","nat"],["bat"]]

Check if one string is rotation of another
ğŸ”¹ Input: "abcde", "cdeab" â†’ Output: true

Find all permutations of a string
ğŸ”¹ Input: "abc" â†’ Output: ["abc", "acb", "bac", "bca", "cab", "cba"]

String compression
ğŸ”¹ Input: "aabbbccc" â†’ Output: "a2b3c3"

Find all occurrences of a substring
ğŸ”¹ Input: "abracadabra", "abra" â†’ Output: Indexes: 0, 7

Replace all spaces with %20
ğŸ”¹ Input: "Mr John Smith" â†’ Output: "Mr%20John%20Smith"

Longest substring without repeating characters
ğŸ”¹ Input: "abcabcbb" â†’ Output: 3 ("abc")

Validate balanced parentheses
ğŸ”¹ Input: "{[()]}" â†’ Output: true

ğŸ”´ HARD LEVEL
Longest palindromic substring
ğŸ”¹ Input: "babad" â†’ Output: "bab" or "aba"

Minimum window substring
ğŸ”¹ Input: "ADOBECODEBANC", "ABC" â†’ Output: "BANC"

Word break problem
ğŸ”¹ Input: "leetcode", ["leet", "code"] â†’ Output: true

Regular expression matching
ğŸ”¹ Input: "aa", "a*" â†’ Output: true

Implement atoi()
ğŸ”¹ Input: "42" â†’ Output: 42

String multiplication
ğŸ”¹ Input: "12" * "34" â†’ Output: "408"

Edit Distance
ğŸ”¹ Input: "horse", "ros" â†’ Output: 3

Count and Say
ğŸ”¹ Input: 4 â†’ Output: "1211"

Decode ways
ğŸ”¹ Input: "12" â†’ Output: 2 ("AB", "L")

Find repeated DNA sequences
ğŸ”¹ Input: "AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT"
ğŸ”¹ Output: ["AAAAACCCCC", "CCCCCAAAAA"]

